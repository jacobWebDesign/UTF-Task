{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-15T13:18:12.662Z",
    "end": "2024-05-15T13:18:12.674Z",
    "duration": 12,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8dcc0eff-0d5e-4c71-b419-cc944cae9bd8",
      "title": "",
      "fullFile": "C:\\Users\\jakku\\OneDrive\\Dokumenty\\EPAMtrainingCourse\\Stage2\\test\\numbers-validator\\isNumberEven.spec.js",
      "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "37f5548c-f73d-4cc1-a36d-d6028c9fa0cf",
          "title": "isNumberEeven positive tests",
          "fullFile": "C:\\Users\\jakku\\OneDrive\\Dokumenty\\EPAMtrainingCourse\\Stage2\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEeven positive tests\"",
              "fullTitle": "isNumberEeven positive tests \"before each\" hook in \"isNumberEeven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "f4733365-1dd5-4157-820b-ad06c7e4928e",
              "parentUUID": "37f5548c-f73d-4cc1-a36d-d6028c9fa0cf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEeven positive tests\"",
              "fullTitle": "isNumberEeven positive tests \"after each\" hook in \"isNumberEeven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "b517e484-8b44-438b-87d8-52b68ce2ea70",
              "parentUUID": "37f5548c-f73d-4cc1-a36d-d6028c9fa0cf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEeven positive tests should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "47661fa1-5020-4fcb-99ac-3a9687b01818",
              "parentUUID": "37f5548c-f73d-4cc1-a36d-d6028c9fa0cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with an odd number",
              "fullTitle": "isNumberEeven positive tests should return true when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "5f5b8269-518d-4511-aa39-f9f2c55d21b7",
              "parentUUID": "37f5548c-f73d-4cc1-a36d-d6028c9fa0cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEeven positive tests should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "2c4c5783-381b-4c8b-9cf8-5546733ea357",
              "parentUUID": "37f5548c-f73d-4cc1-a36d-d6028c9fa0cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided is not an array",
              "fullTitle": "isNumberEeven positive tests should throw an error when provided is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers('\"string\"');\n}).to.throw('[\"string\"] is not an array')",
              "err": {},
              "uuid": "f94d663d-d02f-4fc3-ac62-f930d30fb952",
              "parentUUID": "37f5548c-f73d-4cc1-a36d-d6028c9fa0cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when variable is not an integer",
              "fullTitle": "isNumberEeven positive tests should throw an error when variable is not an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  \n  validator.isInteger(\"string\");\n}).to.throw('[string] is not a number')",
              "err": {},
              "uuid": "5337bf0b-4cf9-4065-9648-4609b343d6d3",
              "parentUUID": "37f5548c-f73d-4cc1-a36d-d6028c9fa0cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return even numbers from an array",
              "fullTitle": "isNumberEeven positive tests should return even numbers from an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const inVar = [2,3,4,5,6]\nconst validationResults = validator.getEvenNumbersFromArray(inVar);\nconst rightArray = [2,4,6];\nexpect(validationResults).to.deep.equal(rightArray);",
              "err": {},
              "uuid": "f98ff80a-1a52-4d74-86a7-31267862df31",
              "parentUUID": "37f5548c-f73d-4cc1-a36d-d6028c9fa0cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided variable is not an array",
              "fullTitle": "isNumberEeven positive tests should throw an error when provided variable is not an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray('\"string\"');\n}).to.throw('[\"string\"] is not an array')",
              "err": {},
              "uuid": "0cbc7f15-a73e-4ef8-990e-d5edfbc559df",
              "parentUUID": "37f5548c-f73d-4cc1-a36d-d6028c9fa0cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when array contains only numbers",
              "fullTitle": "isNumberEeven positive tests should return true when array contains only numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const inArr = [2,3,4,5];\nconst validationResults = validator.isAllNumbers(inArr);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "407aa33f-ac4b-49de-9525-66f09261d69e",
              "parentUUID": "37f5548c-f73d-4cc1-a36d-d6028c9fa0cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided variable is an integer ",
              "fullTitle": "isNumberEeven positive tests should return true when provided variable is an integer ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "2fa21bee-1b8c-4949-a209-872b1ea643de",
              "parentUUID": "37f5548c-f73d-4cc1-a36d-d6028c9fa0cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47661fa1-5020-4fcb-99ac-3a9687b01818",
            "5f5b8269-518d-4511-aa39-f9f2c55d21b7",
            "2c4c5783-381b-4c8b-9cf8-5546733ea357",
            "f94d663d-d02f-4fc3-ac62-f930d30fb952",
            "5337bf0b-4cf9-4065-9648-4609b343d6d3",
            "f98ff80a-1a52-4d74-86a7-31267862df31",
            "0cbc7f15-a73e-4ef8-990e-d5edfbc559df",
            "407aa33f-ac4b-49de-9525-66f09261d69e",
            "2fa21bee-1b8c-4949-a209-872b1ea643de"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}